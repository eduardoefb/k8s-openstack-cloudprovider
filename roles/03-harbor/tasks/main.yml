---
# tasks file for 03-docker
  - include_vars: "{{ playbook_dir }}/vars.yml"  
  - name: Install packages
    apt:
        pkg: 
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: latest
    register: apt_res
    retries: 300
    delay: 10
    until: apt_res is success  

  - name: Remove Docker's installation
    apt:
      pkg:
        - docker
        - docker-engine 
        - docker.io 
        - containerd 
        - runc 
      state: absent
    register: apt_res
    retries: 300
    delay: 10
    until: apt_res is success        

  - name: Remove Docker official GPG key
    file:
      path: /etc/apt/keyrings/docker.gpg
      state: absent

  - name: Add Docker official GPG key
    shell: |
      mkdir -m 0755 -p /etc/apt/keyrings        
      curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    register: apt_res
    retries: 300
    delay: 10
    until: apt_res is success        
  
  - name: Set up the repository
    shell: |
      echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
        $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null      

  - name: Update 
    apt:
      name: '*'
      state: 'latest'
      update_cache: yes
    register: apt_res
    retries: 300
    delay: 10
    until: apt_res is success  

  - name: Install Docker Engine, containerd, and Docker Compose
    apt:
        pkg: 
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest
    register: apt_res
    retries: 300
    delay: 10
    until: apt_res is success    

  - name: Add privilegies to user
    user: 
      name: debian
      groups: docker
      append: yes  
  
  - name: Clear directory
    file:
      path: /opt/docker_certs
      state: absent

  - name: Create directory
    file:
      path: /opt/docker_certs
      state: directory
      owner: root
      group: root
      mode: '0700'

  - name: Copy files
    copy:
      src: "{{ playbook_dir }}/certs/{{ item }}" 
      dest: "/opt/docker_certs/{{ item }}"
      owner: root
      group: root
      mode: '0700'
    loop:
      - "registry.{{ domain }}.crt"
      - "registry.{{ domain }}.key"

  - name: Delete directory
    file:
      path: /opt/harbor
      state: absent

  - name: Create directory
    file:
      path: /opt/harbor
      state: directory

  - name: Download harbor
    unarchive:
      src:  https://github.com/goharbor/harbor/releases/download/v2.5.6/harbor-offline-installer-v2.5.6.tgz
      dest: /opt/
      remote_src: yes
    register: apt_res
    retries: 300
    delay: 10
    until: apt_res is success   

  - name: Define the admin password
    shell: openssl rand -hex 30
    register: admin_pwd

  - name: Define the database password
    shell: openssl rand -hex 30
    register: db_pwd

  - name: Create harbor yml file
    template:
      src: harbor.yml.j2
      dest: /opt/harbor/harbor.yml    

  - name: Prepare harbor installation
    shell: /opt/harbor/prepare 

  - name: Delete directory
    file:
      path: /etc/docker/certs.d/regca
      state: absent

  - name: Create directory
    file:
      path: /etc/docker/certs.d/regca
      state: directory

  - name: Transfer files
    copy:
      src: "{{ playbook_dir }}/certs/regca.crt" 
      dest: /etc/docker/certs.d/regca/regca.crt      

  - name: Restart docker
    systemd:
      name: docker 
      state: restarted

  - name: Execute harbor installation
    shell: /opt/harbor/install.sh      

  - name: Get harbor config file
    fetch:
      src: /opt/harbor/harbor.yml
      dest: "{{ playbook_dir }}"
      flat: yes



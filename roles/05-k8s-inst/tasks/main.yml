---
# tasks file for 05-prep-inst
  - include_vars: "{{ playbook_dir }}/vars.yml"  

  - name: Install the required packages
    become: yes
    apt:
      pkg:
        - python3-pip
        - git
        - buildah 

  - name: Install podman
    become: yes
    apt:
      pkg:
        - podman
    notify: reboot_system
                    
  - name: Kubectl
    become: yes  
    shell: |
      if [ ! -f "/usr/local/bin/kubectl" ]; then
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        mv kubectl /usr/local/bin/
        chmod +x /usr/local/bin/kubectl
      fi
    register: apt_res
    retries: 300
    delay: 10
    until: apt_res is success          

  - name: Configure /etc/hosts
    become: yes  
    template:
      src: etc_hosts.j2
      dest: /etc/hosts        

    register: apt_res
    retries: 300
    delay: 10
    until: apt_res is success   

  - name: Get home user
    shell: echo ${HOME}   
    register: home_dir

  - name: Delete files
    file:
      path: "{{ home_dir.stdout }}/deployment" 
      state: absent
  
  - name: Create dire
    file:
      path: "{{ home_dir.stdout }}/deployment" 
      state: directory
  
  - name: Clone kubestpray
    ansible.builtin.git:
      repo: 'https://github.com/kubernetes-sigs/kubespray.git'
      dest: "{{ home_dir.stdout }}/deployment/kubespray"
      version: master
    register: apt_res
    retries: 300
    delay: 10
    until: apt_res is success   

  - name: Install specified python requirements
    pip:
      requirements: "{{ home_dir.stdout }}/deployment/kubespray/requirements.txt"
    register: apt_res
    retries: 300
    delay: 10
    until: apt_res is success  

  - name: Delete ssh key
    file:
      path:  "{{ home_dir.stdout }}/.ssh/id_rsa"
      state: absent

  - name: Copy key
    copy:
      src: "{{ playbook_dir }}/ssh_keys/id_rsa"
      dest: "{{ home_dir.stdout }}/.ssh/id_rsa"
      mode: '0700'

  - name: Copy sample inventory file
    shell: |
      cd {{ home_dir.stdout }}/deployment/kubespray
      cp -rfp inventory/sample inventory/mycluster
      cd
      chown -R debian:debian {{ home_dir.stdout }}/deployment/kubespray       
  
  - name: Configure init script
    template:
      src: init_script.sh.j2
      dest: "{{ home_dir.stdout }}/init_script.sh"
  
  - name: Exec init script   
    shell: "bash {{ home_dir.stdout }}/init_script.sh"
    register: out

  - debug:
      var: out.stdout   

  - name: Templates all.yaml.j2
    template:
      src: all.yaml.j2
      dest: "{{ home_dir.stdout }}/deployment/kubespray/inventory/mycluster/group_vars/all/all.yml"
      mode: "0644"
      owner: debian
      group: debian

  - name: Templates hosts.yaml.j2 
    template:
      src: hosts.yaml.j2
      dest: "{{ home_dir.stdout }}/deployment/kubespray/inventory/mycluster/hosts.yaml"
      mode: "0644"
      owner: debian
      group: debian

  - name: Change values
    shell: |    
      sed -i 's/container_manager: docker/container_manager: containerd/g' {{ home_dir.stdout }}/deployment/kubespray/inventory/mycluster/group_vars/k8s_cluster/k8s-cluster.yml
      sed -i 's/etcd_deployment_type: docker/etcd_deployment_type: host/g' {{ home_dir.stdout }}/deployment/kubespray/inventory/mycluster/group_vars/etcd.yml
      chown -R debian:debian {{ home_dir.stdout }}/deployment/kubespray         

  - name: Deploy ( connect to the bastian and follow the log /tmp/kubespray.log )
    shell: |
      cd {{ home_dir.stdout }}/deployment/kubespray
      {{ home_dir.stdout }}/.local/bin/ansible-playbook -i inventory/mycluster/hosts.yaml  --become --become-user=root cluster.yml > /tmp/kubespray.log
    register: apt_res
    retries: 300
    delay: 10
    until: apt_res is success   



   
    

